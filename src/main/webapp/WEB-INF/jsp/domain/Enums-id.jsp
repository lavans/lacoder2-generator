<!-- $Id: Enums.jsp 508 2012-09-20 14:41:55Z dobashi $ -->
<!doctype html public "-//w3c//dtd html 4.0 transitional//en"
   "http://www.w3.org/tr/rec-html40/loose.dtd">
<%@ page contentType="text/html; charset=UTF-8" %>
<%@ include file="../common/common.jsp" %>
<%@page import="java.util.*"%>
<%@ page import="java.text.*" %>
<%@ page import="com.lavans.lacoder2.generator.model.Package" %>
<%@ page import="com.lavans.lacoder2.generator.model.*" %>
<%@page import="com.lavans.lacoder2.lang.StringUtils"%>
<%
SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
Package pkg = (Package)request.getAttribute("lacoder.package");
EnumClass enumClass = (EnumClass)request.getAttribute("lacoder.enum");
String className = enumClass.getClassName();
List<String> valueList = enumClass.getFieldList();
List<String> booleanList = enumClass.getBooleanList();%>
<html lang="ja">
<head>
<title>ソース</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<LINK href="red.css" rel="stylesheet" type="text/css">
</head>
<body text="#000000" leftmargin="10" topmargin="10" marginwidth="10" marginheight="10">
<pre>
/* $Id: Enums.jsp 508 2012-09-20 14:41:55Z dobashi $
 * 作成日: <%= sdf.format(new Date()) %>
 *
 *
 * This is generated by lacoder.
 * @see http://www.lavans.com/soft/lacoder/
 */
package <%= pkg.getModelSubPackagePath() %>;

<%--import java.io.Serializable;
 --%>import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
<%--import com.lavans.lacoder2.util.IEnum;
 --%>

/**
 * <%= enumClass.getTitle() %>クラス。
 * @author dobashi
 */
public enum <%= className %> {
<%
	for(int i=0; i<enumClass.getMemberList().size(); i++){
		EnumMember member = enumClass.get(i);
%>	<%= member.getConstName() %>(	"<%= member.getName() %>",	"<%= member.getTitle() %>"<%
		// valueList
		for(int j=0; j<valueList.size(); j++){
			String listName = (String)valueList.get(j);
			if(listName.equals("int")){
%>,	<%= member.getValue(listName) %><%
}else if(member.getValue(listName)==null){
%>,	null<%
}else{
%>,	"<%= member.getValue(listName) %>"<%
			}
		}
		// booleanList
		for(int j=0; j<booleanList.size(); j++){
			String listName = (String)booleanList.get(j);
			if(enumClass.isBoolean(listName)){
				%>,	true<%
			}else{
				%>,	false<%
			}
		}

		out.print("),\n");
	}
%>;

	public static final String _ID	= "<%= StringUtils.uncapitalize(enumClass.getName()) %>";
<%	if(valueList.size()>0){
%>	// リスト名定義
<%	}
	for(int i=0; i<valueList.size(); i++){
		String listName = (String)enumClass.getFieldList().get(i);
%>	public static final String _LIST_<%= listName.toUpperCase() %> =	"<%= listName %>";

<%	} %>
<%--
	for(int i=0; i<enumClass.size(); i++){
		EnumMember member = enumClass.get(i);
%>	public static final <%= className %> <%= member.getConstName() %>	= new <%= className %>(
		"<%= member.getName() %>"	// id
		,"<%= member.getTitle() %>"	// Title
<%		// valueList
		for(int j=0; j<valueList.size(); j++){
			String listName = (String)valueList.get(j);
			if(listName.equals("int")){
%>		,<%= member.getValue(listName) %>	// <%= listName %>
<%			}else if(member.getValue(listName)==null){
%>		,null	// <%= listName %>
<%			}else{
%>		,"<%= member.getValue(listName) %>"	// <%= listName %>
<%			}
		}
		// booleanList
		for(int j=0; j<booleanList.size(); j++){
			String listName = (String)booleanList.get(j);
			if(member.getBoolean(listName)){
%>		,true	// <%= listName %>
<%			}else{
%>		,false	// <%= listName %>
<%			}
		}
%>	);
<%
	}
%>
--%>
<%
	// Map
	valueList.add(0,"all");
	for(int i=0; i<valueList.size(); i++){
		String listName = (String)enumClass.getFieldList().get(i);
%>	/** <%= listName %>格納用 */
<%		if(listName.equals("int")){
%>	private static Map&lt;Integer, <%= className %>&gt; <%= listName %>Map = new HashMap&lt;Integer, <%= className %>&gt;(<%= enumClass.getMemberList().size() %>);
<%		}else{
%>	private static Map&lt;String, <%= className %>&gt; <%= listName %>Map = new HashMap&lt;String, <%= className %>&gt;(<%= enumClass.getMemberList().size() %>);
<%		}
%>	private static List&lt;<%= className %>&gt; <%= listName %>List = new ArrayList&lt;<%= className %>&gt;(<%= enumClass.getMemberList().size() %>);
<%	}	%>	/**
	 * 初期化
	 * <%-- 最終的にはタイトルはResourceBundleから取得？
	 * 動的に言語を切り替えられるようにするか? --%>
	 */
	static{
<%
	for(int i=0; i<valueList.size(); i++){
		String listName = (String)enumClass.getFieldList().get(i);
		for(int j=0; j<enumClass.getMemberList().size(); j++){
			EnumMember member = enumClass.get(j);
			// 除外登録されていたら次へ
			if(member.isExclude(listName)){
				continue;
			}
			String key = "";
			if(listName.equals("all")){
				key = "\""+member.getName()+"\"";
			}else if(listName.equals("int")){
				key = "new Integer("+member.getValue(listName)+")";
			}else{
				key = "\""+member.getValue(listName)+"\"";
			}
%>		<%= listName %>Map.put(<%= key %>,<%= member.getConstName() %>);
		<%= listName %>List.add(<%= member.getConstName() %>);
<%		}
	}
%>	}

	/**
	 * IDからインスタンス取得。
	 * @param id
	 * @return
	 */
	public static <%= className %> getInstance(String id){
		return (<%= className %>)allMap.get(id);
	}

	/**
	 * IDから表示名を取得。
	 * @param id
	 * @return
	 */
	public static String getTitle(String id){
		return getTitle(id, "");
	}
	public static String getTitle(String id, String defaultStr){
		if(allMap.get(id)!=null){
			allMap.get(id).getTitle();
		}
		return defaultStr;
	}

<%
	for(int i=0; i<valueList.size(); i++){
		String listName = (String)enumClass.getFieldList().get(i);
		if(listName.equals("int")){
%>	/**
	 * <%= listName %>からインスタンス取得。
	 * @param id
	 * @return
	 */
	public static <%= className %> getInstanceBy<%= StringUtils.capitalize(listName) %>(int id){
		return (<%= className %>)<%= listName %>Map.get(new Integer(id));
	}
<%		}else{
%>
	/**
	 * IDからインスタンス取得。
	 * @param id
	 * @return
	 */
	public static <%= className %> getInstanceBy<%= StringUtils.capitalize(listName) %>(String id){
		return (<%= className %>)<%= listName %>Map.get(id);
	}
<%
		}
	}
%>
	/**
	 * デフォルトのインスタンスを返す。
	 * @param id
	 * @return
	 */
	public static <%= className %> getDefault(){
<%
	if(enumClass.getDefaultMember()!=null){
%>		return <%= enumClass.getDefaultMember().getConstName() %>;
<%	}else{
%>		return null;
<%	}	%>
	}

	/**
	 * デフォルトのIDを返す。
	 * @param id
	 * @return
	 */
	public static String getDefaultId(){
<%
	if(enumClass.getDefaultMember()!=null){
%>		return <%= enumClass.getDefaultMember().getConstName() %>.getId();
<%	}else{
%>		return "";
<%	}	%>
	}

<%	for(int i=0; i<valueList.size(); i++){
		String listName = (String)enumClass.getFieldList().get(i);
%>	/**
	 * <%= listName %>インスタンス一覧を返す。
	 */
	public static List&lt;<%= className %>&gt; get<%= StringUtils.capitalize(listName) %>List(){
		return Collections.unmodifiableList(<%= listName %>List);
	}
<%	}	%>
	private String id = null;
	private String title = null;
<%	// value_list
	valueList.remove("all");
	for(int i=0; i<valueList.size(); i++){
		String listName = (String)enumClass.getFieldList().get(i);
		if(listName.equals("int")){
%>	private int intValue = 0;
<%		}else{
%>	private String <%= listName %>Value = null;
<%		}
	}
	// boolean_list
	for(int i=0; i<booleanList.size(); i++){
		String listName = (String)enumClass.getBooleanList().get(i);
%>	private boolean is<%= StringUtils.capitalize(listName) %> = false;
<%	}	%>
	/**
	 * コンストラクタ。
	 */
	private <%= className %>(
		String id
		,String title
<%	// value_list
	for(int i=0; i<valueList.size(); i++){
		String listName = (String)enumClass.getFieldList().get(i);
		if(listName.equals("int")){
%>		,int intValue
<%		}else{
%>		,String <%= listName %>Value
<%		}
	}
	// boolean_list
	for(int i=0; i<booleanList.size(); i++){
		String listName = (String)enumClass.getBooleanList().get(i);
%>		,boolean is<%= StringUtils.capitalize(listName) %>
<%	}
%>	){
		this.id = id;
		this.title = title;
<%	for(int i=0; i<valueList.size(); i++){
		String listName = (String)enumClass.getFieldList().get(i);
%>		this.<%= listName %>Value = <%= listName %>Value;
<%	}
	// boolean_list
	for(int i=0; i<booleanList.size(); i++){
		String listName = (String)enumClass.getBooleanList().get(i);
%>		this.is<%= StringUtils.capitalize(listName) %> = is<%= StringUtils.capitalize(listName) %>;
<%	}
%>	}
	public String getId(){
		return id;
	}
	public String getTitle(){
		return title;
	}
<%	for(int i=0; i<valueList.size(); i++){
		String listName = (String)enumClass.getFieldList().get(i);
		if(listName.equals("int")){
%>	public int getInt(){
		return <%= listName %>Value;
	}
<%		}else{
%>	public String get<%= StringUtils.capitalize(listName) %>(){
		return <%= listName %>Value;
	}
<%		}
	}
%><%
	// boolean_list
	for(int i=0; i<booleanList.size(); i++){
		String listName = (String)enumClass.getBooleanList().get(i);
%>	public boolean is<%= StringUtils.capitalize(listName) %>(){
		return is<%= StringUtils.capitalize(listName) %>;
	}
<%	} %><%--
	/**
	 * 同じenumかを比較するメソッド。
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	public boolean equals(Object obj) {
		if(this==obj) return true;
		if(obj instanceof <%= className %>){
			if(id.equals(((<%= className %>)obj).getId())){
				return true;
			}
		}
		return false;
	}
--%>
	@Override
	public String toString(){
		return "<%= className %>:"+id;
	}
}
</pre>
<!--
<%= debugStr %>
-->
</body>

<%--	//public static final String <%= member.getConstName() %>	= "<%= member.getName() %>"; --%>